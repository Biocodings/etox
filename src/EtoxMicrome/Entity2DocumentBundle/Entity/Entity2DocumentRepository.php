<?php

namespace EtoxMicrome\Entity2DocumentBundle\Entity;

use Doctrine\ORM\EntityRepository;
/**
 * Entity2DocumentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Entity2DocumentRepository extends EntityRepository
{

    public function getValToSearch($field)
    {
        switch ($field) {
            case "hepatotoxicity":
                $valToSearch="hepval";
                break;
            case "cardiotoxicity":
                $valToSearch="cardval";
                break;
            case "nephrotoxicity":
                $valToSearch="nephval";
                break;
            case "phospholipidosis":
                $valToSearch="phosval";
                break;
        }
        return $valToSearch;
    }

    public function getEntity2DocumentFromField($field, $typeOfEntity, $arrayEntityName)
    {
        return $this->getEntity2DocumentFromFieldDQL($field, $typeOfEntity, $arrayEntityName)->getResult();
    }

    public function getEntity2DocumentFromFieldDQL($field, $entityType, $arrayEntityName)
    {//("hepatotoxicity","pubmed","CompoundDict",arrayEntityId)
        $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        $sql="SELECT e2d,d
            FROM EtoxMicromeEntity2DocumentBundle:Entity2Document e2d
            JOIN e2d.document d
            WHERE e2d.name IN (:arrayEntityName)
            AND e2d.qualifier = :entityType
            AND d.$valToSearch is not NULL
            ORDER BY d.$valToSearch desc
            ";

        //ld($sql);
        $query = $this->_em->createQuery($sql);
        $query->setParameter("arrayEntityName", $arrayEntityName);
        $query->setParameter('entityType', $entityType);
        return $query;

    }


    public function getCompound2Term2DocumentFromField($field, $typeOfEntity, $arrayEntityName)
    {
        return $this->getCompound2Term2DocumentFromFieldDQL($field, $typeOfEntity, $arrayEntityName)->getResult();
    }

    public function getCompound2Term2DocumentFromFieldDQL($field, $entityType, $arrayEntityName)
    {//("hepatotoxicity","pubmed","CompoundDict",arrayEntityId)
        $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        $sql="SELECT c2t2d
            FROM EtoxMicromeEntity2DocumentBundle:Compound2Term2Document c2t2d
            WHERE c2t2d.compound IN (:arrayEntityName)
            ORDER BY c2t2d.relationScore desc, c2t2d.relationType
            ";

        $query = $this->_em->createQuery($sql);
        $query->setParameter("arrayEntityName", $arrayEntityName);
        return $query;

    }

    public function getCompound2Cytochrome2DocumentFromField($field, $typeOfEntity, $arrayEntityName)
    {
        return $this->getCompound2Cytochrome2DocumentFromFieldDQL($field, $typeOfEntity, $arrayEntityName)->getResult();
    }

    public function getCompound2Cytochrome2DocumentFromFieldDQL($field, $entityType, $arrayEntityName)
    {//("hepatotoxicity","pubmed","CompoundDict",arrayEntityId)
        $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        $sql="SELECT c2t2d
            FROM EtoxMicromeEntity2DocumentBundle:Compound2Cyp2Document c2t2d
            WHERE c2t2d.cyp IN (:arrayEntityName)
            ORDER BY c2t2d.relationScore desc, c2t2d.relationType

            ";

        $query = $this->_em->createQuery($sql);
        $query->setParameter("arrayEntityName", $arrayEntityName);
        return $query;

    }

    public function getCompound2Marker2DocumentFromField($field, $typeOfEntity, $arrayEntityName)
    {
        return $this->getCompound2Marker2DocumentFromFieldDQL($field, $typeOfEntity, $arrayEntityName)->getResult();
    }

    public function getCompound2Marker2DocumentFromFieldDQL($field, $entityType, $arrayEntityName)
    {//("hepatotoxicity","pubmed","CompoundDict",arrayEntityId)
        $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        $sql="SELECT c2m2d
            FROM EtoxMicromeEntity2DocumentBundle:Compound2Marker2Document c2m2d
            WHERE c2m2d.liverMarkerName IN (:arrayEntityName)
            ORDER BY c2m2d.relationScore desc, c2m2d.relationType

            ";

        $query = $this->_em->createQuery($sql);
        $query->setParameter("arrayEntityName", $arrayEntityName);
        return $query;

    }

    public function findEntity2DocumentFromDocument($document)
    {
        //Function to search all the entities involved in a particular sentence in order to highlight them
        $documentId=$document->getId();

        $em = $this->getEntityManager();
        $consulta = $em->createQuery('
            SELECT e2d
            FROM EtoxMicromeEntity2DocumentBundle:Entity2Document e2d
            WHERE e2d.document = :documentId
        ');
        $consulta->setParameter('documentId', $documentId);
        return $consulta->execute();
    }

    public function getExportQuery()
    {
        //We have to create a query that searchs all over the entityIds inside the $arrayEntityId
        $sql="SELECT e2d,d
            FROM EtoxMicromeEntity2DocumentBundle:Entity2Document e2d
            JOIN e2d.document d
            WHERE e2d.qualifier = 'CompoundMesh'
            AND d.hepval is not NULL
            ORDER BY d.hepval desc
            ";

        $query = $this->_em->createQuery($sql);
        return $query;
    }

    public function updateEntity2DocumentCuration($entity2DocumentId, $action)
    {
        /*Here we get the entity2Document and the action to take for the curation value.
        $action can be check or cross.
        If $action==check, then we have to add one to the curation field of the Entity2Document register
        If $action==cross, then we have to substract one to the curation field of the Entity2Document register

        After that, taking into account the curation value, we have to generate the html to render inside the curation
        */

        //ld($entity2DocumentId);
        //ldd($action);

        $em = $this->getEntityManager();
        $entity2Document=$em->getRepository('EtoxMicromeEntity2DocumentBundle:Entity2Document')->findOneById($entity2DocumentId);
        if (!$entity2Document) {
            throw $this->createNotFoundException(
                "Cannot curate this Entity2Document $entity2DocumentId"
            );
        }
        else{
            $curation=$entity2Document->getCuration();
            if ($action=="check"){
                $entity2Document->setCuration($curation + 1);
            }elseif($action=="cross"){
                $entity2Document->setCuration($curation - 1);
            }
            $em->flush();
            $curationReturn=$entity2Document->getCuration();
            return($curationReturn);
        }
        return ($curationReturn);
    }

    public function getEntitySummary($entity2DocumentId, $qualifier){
        $em = $this->getEntityManager();
        $dictionary=array();
        $stringOutput="";

        if ($qualifier=="CompoundDict"){
            $entity2Document=$em->getRepository('EtoxMicromeEntity2DocumentBundle:Entity2Document')->findOneById($entity2DocumentId);
            $nameEntity=$entity2Document->getName();
            $entity=$em->getRepository("EtoxMicromeEntityBundle:CompoundDict")->findOneByName($nameEntity);
            //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover
            $name=$entity->getName();
            if($name!=""){
                $dictionary["name"]=$name;
            }
            $chemIdPlus=$entity->getChemIdPlus();
            if($chemIdPlus!=""){
                $dictionary["chemIdPlus"]=$chemIdPlus;
            }
            $chebi=$entity->getChebi();
            if($chebi!=""){
                $dictionary["chebi"]=$chebi;
            }
            $inChi=$entity->getInChi();
            if($inChi!=""){
                $dictionary["inChi"]=$inChi;
            }
            $drugBank=$entity->getDrugBank();
            if($drugBank!=""){
                $dictionary["drugBank"]=$drugBank;
            }
            $humanMetabolome=$entity->getHumanMetabolome();
            if($humanMetabolome!=""){
                $dictionary["humanMetabolome"]=$humanMetabolome;
            }
            $keggCompound=$entity->getKeggCompound();
            if($keggCompound!=""){
                $dictionary["keggCompound"]=$keggCompound;
            }
            $keggDrug=$entity->getKeggDrug();
            if($keggDrug!=""){
                $dictionary["keggDrug"]=$keggDrug;
            }
            $mesh=$entity->getMesh();
            if($mesh!=""){
                $dictionary["mesh"]=$mesh;
            }
            $nrDbIds=$entity->getNrDbIds();
            if($nrDbIds!=""){
                $dictionary["nrDbIds"]=$nrDbIds;
            }
            $smile=$entity->getSmile();
            if($smile!=""){
                $dictionary["smile"]=$smile;
            }

        }

        if($qualifier=="Marker"){
            $entity2Document=$em->getRepository('EtoxMicromeEntity2DocumentBundle:Entity2Document')->findOneById($entity2DocumentId);
            $nameEntity=$entity2Document->getName();
            $entity=$em->getRepository("EtoxMicromeEntityBundle:Marker")->findOneByName($nameEntity);
            //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover
            $name=$entity->getName();
            if($name!=""){
                $dictionary["name"]=$name;
            }
            $tax=$entity->getTax();
            if($tax!=""){
                $dictionary["tax"]=$tax;
            }
            $markerType=$entity->getMarkerType();
            if($markerType!=""){
                $dictionary["markerType"]=$markerType;
            }
        }

        if($qualifier=="Specie"){
            $entity2Document=$em->getRepository('EtoxMicromeEntity2DocumentBundle:Entity2Document')->findOneById($entity2DocumentId);
            $nameEntity=$entity2Document->getName();
            $entity=$em->getRepository("EtoxMicromeEntityBundle:Specie")->findOneByName($nameEntity);
            //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover
            $name=$entity->getName();
            if($name!=""){
                $dictionary["name"]=$name;
            }
            $nameClass=$entity->getNameClass();
            if($nameClass!=""){
                $dictionary["nameClass"]=$nameClass;
            }
            $ncbiTaxId=$entity->getNcbiTaxId();
            if($ncbiTaxId!=""){
                $dictionary["NCBItaxId"]=$ncbiTaxId;
            }
            $specieCategory=$entity->getSpecieCategory();
            if($specieCategory!=""){
                $dictionary["specieCategory"]=$specieCategory;
            }
            $specieTox=$entity->getSpecieTox();
            if($specieTox!=""){
                $dictionary["specieTox"]=$specieTox;
            }
        }

        if($qualifier=="HepKeywordTermNorm"){
            $term2Document=$em->getRepository('EtoxMicromeEntity2DocumentBundle:HepKeywordTermNorm2Document')->findOneById($entity2DocumentId);

            //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover
            $normalizedTerm=$term2Document->getHepKeywordNorm();
            if($normalizedTerm!=""){
                $dictionary["Normalized Term"]=$normalizedTerm;
            }
            $kind=$term2Document->getKind();
            if($kind!=""){
                $dictionary["kind"]=$kind;
            }
        }

        if($qualifier=="HepKeywordTermVariant"){
            $term2Document=$em->getRepository('EtoxMicromeEntity2DocumentBundle:HepKeywordTermVariant2Document')->findOneById($entity2DocumentId);
            //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover
            $term=$term2Document->getHepKeywordTerm();
            if($term!=""){
                $dictionary["term"]=$term;
            }
            $termVariant=$term2Document->getTermVariant();
            if($termVariant!=""){
                $dictionary["term variant"]=$termVariant;
            }
            $normalizedTerm=$term2Document->getHepKeywordNorm();
            if($normalizedTerm!=""){
                $dictionary["Normalized Term"]=$normalizedTerm;
            }
            $kind=$term2Document->getKind();
            if($kind!=""){
                $dictionary["kind"]=$kind;
            }
        }

        if($qualifier=="Cytochrome"){
            $cytochrome2Document=$em->getRepository('EtoxMicromeEntity2DocumentBundle:Cytochrome2Document')->findOneById($entity2DocumentId);
            $cytochromeName=$cytochrome2Document->getCypsMention();
            $cytochrome=$em->getRepository('EtoxMicromeEntityBundle:Cytochrome')->findOneByName($cytochromeName);

            $entityId=$cytochrome->getEntityId();
            if($entityId!=""){
                $dictionary["Entity Id"]=$entityId;
            }
            $name=$cytochrome->getName();
            if($name!=""){
                $dictionary["Name"]=$name;
            }
            $type=$cytochrome->getType();
            if($type!=""){
                $dictionary["Type"]=$type;
            }
            $tax=$cytochrome->getTax();
            if($tax!=""){
                $dictionary["Tax"]=$tax;
            }
            $score=$cytochrome->getScore();
            if($score!=""){
                $dictionary["Score"]=round($score,3);
            }
            $canonical=$cytochrome->getCanonical();
            if($canonical!=""){
                $dictionary["Canonical"]=$canonical;
            }
        }

        foreach($dictionary as $key => $value){
            if ($value!=""){
                $stringOutput=$stringOutput."$key: $value<br/>";
            }
        }
        return ($stringOutput);
    }
}