<?php

namespace EtoxMicrome\Entity2AbstractBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * Entity2AbstractRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Entity2AbstractRepository extends EntityRepository
{
    public function getValToSearch($field)
    {
        switch ($field) {
            case "hepatotoxicity":
                $valToSearch="hepval";
                break;
            case "cardiotoxicity":
                $valToSearch="cardval";
                break;
            case "nephrotoxicity":
                $valToSearch="nephval";
                break;
            case "phospholipidosis":
                $valToSearch="phosval";
                break;
        }
        return $valToSearch;
    }

    public function getEntity2AbstractFromField($field, $typeOfEntity, $arrayEntityName)
    {
        return $this->getEntity2AbstractFromFieldDQL($field, $typeOfEntity, $arrayEntityName)->getResult();
    }

    public function getEntity2AbstractFromFieldDQL($field, $entityType, $arrayEntityName)
    {//("hepatotoxicity","CompoundDict",arrayEntityId)
        $message="inside getEntity2AbstractFromFieldDQL";
        $valToSearch=$this->getValToSearch($field);//"i.e hepval, embval... etc"
        $sql="SELECT e2a,a
            FROM EtoxMicromeEntity2AbstractBundle:Entity2Abstract e2a
            JOIN e2a.abstracts a
            WHERE e2a.name IN (:arrayEntityName)
            AND e2a.qualifier = :entityType
            AND a.$valToSearch is not NULL
            ORDER BY a.$valToSearch desc
            ";
        $query = $this->_em->createQuery($sql);
        $query->setParameter("arrayEntityName", $arrayEntityName);
        $query->setParameter('entityType', $entityType);
        return $query;

    }

    public function findEntity2AbstractFromAbstract($abstract)
    {
        //Function to search all the entities involved in a particular sentence in order to highlight them
        $abstractId=$abstract->getId();

        $em = $this->getEntityManager();
        $consulta = $em->createQuery('
            SELECT e2a
            FROM EtoxMicromeEntity2AbstractBundle:Entity2Abstract e2a
            WHERE e2a.abstracts = :abstractId
        ');
        $consulta->setParameter('abstractId', $abstractId);
        return $consulta->execute();
    }

    public function updateEntity2AbstractCuration($entity2AbstractId, $action)
    {
        /*Here we get the entity2Abstract and the action to take for the curation value.
        $action can be check or cross.
        If $action==check, then we have to add one to the curation field of the Entity2Abstract register
        If $action==cross, then we have to substract one to the curation field of the Entity2Abstract register

        After that, taking into account the curation value, we have to generate the html to render inside the curation
        */

        //ld($entity2AbstractId);
        //ldd($action);

        $em = $this->getEntityManager();
        $entity2Abstract=$em->getRepository('EtoxMicromeEntity2AbstractBundle:Entity2Abstract')->findOneById($entity2AbstractId);
        if (!$entity2Abstract) {
            throw $this->createNotFoundException(
                "Cannot curate this Entity2Abstract $entity2AbstractId"
            );
        }
        else{
            $curation=$entity2Abstract->getCuration();
            if ($action=="check"){
                $entity2Abstract->setCuration($curation + 1);
            }elseif($action=="cross"){
                $entity2Abstract->setCuration($curation - 1);
            }
            $em->flush();
            $curationReturn=$entity2Abstract->getCuration();
            return($curationReturn);
        }
        return ($curationReturn);
    }

    public function getEntitySummary($entity2AbstractId, $qualifier){
        $em = $this->getEntityManager();
        $dictionary=array();
        $stringOutput="";

        if ($qualifier=="CompoundDict"){
            $entity2Document=$em->getRepository('EtoxMicromeEntity2AbstractBundle:Entity2Abstract')->findOneById($entity2AbstractId);
            $nameEntity=$entity2Document->getName();
            $entity=$em->getRepository("EtoxMicromeEntityBundle:CompoundDict")->findOneByName($nameEntity);
            if($entity==null){
                $stringOutput="";
                return $stringOutput;
            }
            //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover
            $name=$entity->getName();

            if($name!=""){
                $dictionary["name"]=$name;
            }
            $chemIdPlus=$entity->getChemIdPlus();
            if($chemIdPlus!=""){
                $dictionary["chemIdPlus"]=$chemIdPlus;
            }
            $chebi=$entity->getChebi();
            if($chebi!=""){
                $dictionary["chebi"]=$chebi;
            }
            $inChi=$entity->getInChi();
            if($inChi!=""){
                $dictionary["inChi"]=$inChi;
            }
            $drugBank=$entity->getDrugBank();
            if($drugBank!=""){
                $dictionary["drugBank"]=$drugBank;
            }
            $humanMetabolome=$entity->getHumanMetabolome();
            if($humanMetabolome!=""){
                $dictionary["humanMetabolome"]=$humanMetabolome;
            }
            $keggCompound=$entity->getKeggCompound();
            if($keggCompound!=""){
                $dictionary["keggCompound"]=$keggCompound;
            }
            $keggDrug=$entity->getKeggDrug();
            if($keggDrug!=""){
                $dictionary["keggDrug"]=$keggDrug;
            }
            $mesh=$entity->getMesh();
            if($mesh!=""){
                $dictionary["mesh"]=$mesh;
            }
            $nrDbIds=$entity->getNrDbIds();
            if($nrDbIds!=""){
                $dictionary["nrDbIds"]=$nrDbIds;
            }
            $smile=$entity->getSmile();
            if($smile!=""){
                $dictionary["smile"]=$smile;
            }
        }

        if($qualifier=="Marker"){
            $entity2Document=$em->getRepository('EtoxMicromeEntity2AbstractBundle:Entity2Abstract')->findOneById($entity2AbstractId);
            $nameEntity=$entity2Document->getName();
            $entity=$em->getRepository("EtoxMicromeEntityBundle:Marker")->findOneByName($nameEntity);
            //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover
            $name=$entity->getName();
            if($name!=""){
                $dictionary["name"]=$name;
            }
            $tax=$entity->getTax();
            if($tax!=""){
                $dictionary["tax"]=$tax;
            }
            $markerType=$entity->getMarkerType();
            if($markerType!=""){
                $dictionary["markerType"]=$markerType;
            }
        }

        if($qualifier=="Specie"){
            $entity2Document=$em->getRepository('EtoxMicromeEntity2AbstractBundle:Entity2Abstract')->findOneById($entity2AbstractId);
            $nameEntity=$entity2Document->getName();
            $entity=$em->getRepository("EtoxMicromeEntityBundle:Specie")->findOneByName($nameEntity);
            //Once we have the entity itself we have to create a dictionary to save with key=field, value=field_value which can be processed to create the string to the mouseover
            $name=$entity->getName();
            if($name!=""){
                $dictionary["name"]=$name;
            }
            $nameClass=$entity->getNameClass();
            if($nameClass!=""){
                $dictionary["nameClass"]=$nameClass;
            }
            $ncbiTaxId=$entity->getNcbiTaxId();
            if($ncbiTaxId!=""){
                $dictionary["NCBItaxId"]=$ncbiTaxId;
            }
            $specieCategory=$entity->getSpecieCategory();
            if($specieCategory!=""){
                $dictionary["specieCategory"]=$specieCategory;
            }
            $specieTox=$entity->getSpecieTox();
            if($specieTox!=""){
                $dictionary["specieTox"]=$specieTox;
            }
        }

        foreach($dictionary as $key => $value){
            if ($value!=""){
                $stringOutput=$stringOutput."$key: $value<br/>";
            }
        }
        return ($stringOutput);
    }
}