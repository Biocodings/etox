<?php

namespace EtoxMicrome\EntityBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;

/**
 * CompoundDictRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CompoundDictRepository extends EntityRepository
{
    public function getEntityFromId($entityId)
    {
        $message="Inside getEntityIdFromName at CompoundDictRepository";
        $query = $this->_em->createQuery("
            SELECT c
            FROM EtoxMicromeEntityBundle:CompoundDict c
            WHERE c.id= :entityId
        ");
        $query->setParameter('entityId', $entityId);
        $compound=$query->getResult();
        if(count($compound)==0){
            $errorMessage="There is no entity with that name ($entityName)";
            ldd($errorMessage);
            $entity=array();
            return $entity;
        }
        if(count($compound)!=1){
            $errorMessage="There are more than one entityName for '$entityName'";
            ldd($errorMessage);
        }
        //We return all the Compounds with the entityName given. By now we supose its only one entity!!!
        $entity=$compound[0];
        return $entity;
    }

    public function getEntityFromName($entityName)
    {
        $message="Inside getEntityIdFromName at CompoundDictRepository";
        $query = $this->_em->createQuery("
            SELECT c
            FROM EtoxMicromeEntityBundle:CompoundDict c
            WHERE c.name= :entityName
        ");
        $query->setParameter('entityName', $entityName);
        $compound=$query->getResult();
        if(count($compound)==0){
            $errorMessage="There is no entity with that name ($entityName)";
            ld($errorMessage);
            $entity=array();
            return $entity;
        }
        if(count($compound)!=1){
            $errorMessage="There are more than one entityName for '$entityName'";
            ld($errorMessage);
        }
        //We return all the CompoundDict with the entityName given. By now we supose its only one entity!!!
        $entity=$compound[0];
        return $entity;
    }

    public function getIdFromGenericField($key, $value, $arrayEntityId)
    {
        $message="Inside getEntityIdFromName at CompoundDictRepository";
        $query = $this->_em->createQuery("
            SELECT c
            FROM EtoxMicromeEntityBundle:CompoundDict c
            WHERE c.$key= :value
        ");
        $query->setParameter('value', $value);
        $compounds=$query->getResult();
        if(count($compounds)==0){
            return $arrayEntityId;
        }
        else{
            $errorMessage="There are at least one Compound for $key = $value";
            //ld($errorMessage);
            foreach($compounds as $compound){
                $arrayEntityId[]=$compound->getId();
            }
        }
        //We return all the Compounds with the entityName given. By now we supose its only one entity!!!
        return $arrayEntityId;
    }

    public function searchEntityGivenAnId($entityId)
    {
        $message="Inside searchEntityGivenAnId at CompoundDictRepository";
        //ldd($message);
        $query = $this->_em->createQuery("
            SELECT c
            FROM EtoxMicromeEntityBundle:CompoundDict c
            WHERE c.chemIdPlus = :entityId
            OR c.chebi = :entityId
            OR c.casRegistryNumber = :entityId
            OR c.pubChemCompound = :entityId
            OR c.pubChemSubstance = :entityId
            OR c.drugBank = :entityId
            OR c.humanMetabolome = :entityId
            OR c.keggCompound = :entityId
            OR c.keggDrug = :entityId
            OR c.mesh = :entityId

        ");
        $query->setParameter('entityId', $entityId);
        $compound=$query->getResult();
        if(count($compound)==0){
            $errorMessage="There is no entity with that entityId ($entityId)";
            ld($errorMessage);
            $entity=array();
            return $entity;
        }
        if(count($compound)!=1){
            $errorMessage="There are more than one entityId for '$entityId'";
            ld($errorMessage);
        }
        //We return only one entity. Later on we will make the query expansion so we will collect all of them
        $entity=$compound[0];
        return $entity;
    }

    public function searchEntityGivenAnStructureText($structureText)
    {
        $message="Inside searchEntityGivenAnStructureText at CompoundDictRepository";
        //ldd($message);
        $query = $this->_em->createQuery("
            SELECT c
            FROM EtoxMicromeEntityBundle:CompoundDict c
            WHERE c.inChi = :structureText
            OR c.smile = :structureText
        ");
        $query->setParameter('structureText', $structureText);
        $compound=$query->getResult();
        if(count($compound)==0){
            $errorMessage="There is no entity with that structure ($structureText)";
            ld($errorMessage);
        }
        if(count($compound)!=1){
            $errorMessage="There are more than one entities for '$structureText'";
            ld($errorMessage);
        }
        //We return only one entity. Later on we will make the query expansion so we will collect all of them
        $entity=$compound[0];
        return $entity;
    }
}
