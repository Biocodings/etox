<?php

namespace EtoxMicrome\EntityBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CytochromeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CytochromeRepository extends EntityRepository
{
    public function getEntityFromId($entityId)
    {
        $message="Inside getEntityFromId at CytochromeRepository";
        $query = $this->_em->createQuery("
            SELECT a
            FROM EtoxMicromeEntityBundle:Cytochrome a
            WHERE a.id= :entityId
        ");
        $query->setParameter('entityId', $entityId);
        $cytochrome=$query->getResult();
        if(count($cytochrome)==0){
            $errorMessage="There is no entity with that name ('$entityName')";
            ldd($errorMessage);
        }
        if(count($cytochrome)!=1){
            $errorMessage="There are more than one entityName for '$entityName'";
            ld($errorMessage);
        }
        //We return all the Compounds with the entityName given. By now we supose its only one entity!!!
        $entity=$cytochrome[0];
        return $entity;
    }

    public function getEntityFromName($entityName)
    {
        $message="Inside getEntityFromName at CytochromeRepository";
        $query = $this->_em->createQuery("
            SELECT a
            FROM EtoxMicromeEntityBundle:Cytochrome a
            WHERE a.name= :entityName
        ");
        $query->setParameter('entityName', $entityName);
        $cytochrome=$query->getResult();
        if(count($cytochrome)==0){
            $errorMessage="There is no entity with that name ($entityName)";
            $entity=array();
            return $entity;
        }
        if(count($cytochrome)!=1){
            $errorMessage="There are more than one entityName for '$entityName'";
            //ld($errorMessage);
        }
        //We return only one entity because we will do a query expansion later on.
        $entity=$cytochrome[0];
        return $entity;
    }

    public function getIdFromGenericField($key, $value, $arrayEntityId)
    {
        $message="Inside getIdFromGenericField at CytochromeRepository";
        $query = $this->_em->createQuery("
            SELECT c
            FROM EtoxMicromeEntityBundle:Cytochrome c
            WHERE c.$key= :value
        ");
        $query->setParameter('value', $value);
        $compounds=$query->getResult();
        if(count($compounds)==0){
            return $arrayEntityId;
        }
        else{
            $errorMessage="There are at least one Compound for $key = $value";
            //ld($errorMessage);
            foreach($compounds as $compound){
                $arrayEntityId[]=$compound->getId();
            }
        }
        //We return all the Compounds with the entityName given. By now we supose its only one entity!!!
        return $arrayEntityId;
    }

    public function searchEntityGivenAnId($entityId)
    {
        $message="Inside searchEntityGivenAnId at CytochromeRepository";
        //ldd($message);
        $query = $this->_em->createQuery("
            SELECT c
            FROM EtoxMicromeEntityBundle:Cytochrome c
            where c.entityId= :entityId
        ");
        $query->setParameter('entityId', $entityId);
        $compound=$query->getResult();
        if(count($compound)==0){
            $errorMessage="There is no entity with that entityId ($entityId)";
            $entity=array();
            return $entity;
        }
        if(count($compound)!=1){
            $errorMessage="There are more than one entityId for '$entityId'";

        }
        //We return only one entity. Later on we will make the query expansion so we will collect all of them
        $entity=$compound[0];
        return $entity;
    }

    public function searchEntityGivenACanonical($canonical)
    {
        $message="Inside searchEntityGivenACanonical at CytochromeRepository";
        //ldd($message);
        $query = $this->_em->createQuery("
            SELECT c
            FROM EtoxMicromeEntityBundle:Cytochrome c
            where c.canonical= :canonical
        ");
        $query->setParameter('canonical', $canonical);
        $compound=$query->getResult();
        if(count($compound)==0){
            $errorMessage="There is no entity with that entityId ($entityId)";
            $entity=array();
            return $entity;
        }
        if(count($compound)!=1){
            $errorMessage="There are more than one entityId for '$entityId'";

        }
        //We return only one entity. Later on we will make the query expansion so we will collect all of them
        $entity=$compound[0];
        return $entity;
    }
}
